#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.3603
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace TOB.Entities
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.Runtime.Serialization;
	using System.ComponentModel;
	using System;
	
	
	
	
	[DataContract()]
	public partial class Account : TOBEntityBase, INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Username;
		
		private string _Password;
		
		private int _AccountType;
		
		private System.Data.Linq.Binary _Version;
		
		private System.Nullable<System.DateTime> _CreationDate;
		
		private System.Nullable<bool> _IsOAuth;
		
		private string _AccessToken;
		
		private string _AccessTokenSecret;
		
		private EntityRef<AccountType> _AccountTypeAccountType;
		
		private EntitySet<DirectMessage> _DirectMessages;
		
		private EntitySet<AccountFilterMapping> _AccountFilterMappings;
		
		private EntitySet<Status> _Status;
		
		private EntitySet<UserProfile> _UserProfiles;
		
		private bool serializing;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnUsernameChanging(string value);
    partial void OnUsernameChanged();
    partial void OnPasswordChanging(string value);
    partial void OnPasswordChanged();
    partial void OnAccountTypeChanging(int value);
    partial void OnAccountTypeChanged();
    partial void OnVersionChanging(System.Data.Linq.Binary value);
    partial void OnVersionChanged();
    partial void OnCreationDateChanging(System.Nullable<System.DateTime> value);
    partial void OnCreationDateChanged();
    partial void OnIsOAuthChanging(System.Nullable<bool> value);
    partial void OnIsOAuthChanged();
    partial void OnAccessTokenChanging(string value);
    partial void OnAccessTokenChanged();
    partial void OnAccessTokenSecretChanging(string value);
    partial void OnAccessTokenSecretChanged();
    #endregion
		
		public Account()
		{
			this.Initialize();
		}
		
		[DataMember(Order=1)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[DataMember(Order=2)]
		public string Username
		{
			get
			{
				return this._Username;
			}
			set
			{
				if ((this._Username != value))
				{
					this.OnUsernameChanging(value);
					this.SendPropertyChanging();
					this._Username = value;
					this.SendPropertyChanged("Username");
					this.OnUsernameChanged();
				}
			}
		}
		
		[DataMember(Order=3)]
		public string Password
		{
			get
			{
				return this._Password;
			}
			set
			{
				if ((this._Password != value))
				{
					this.OnPasswordChanging(value);
					this.SendPropertyChanging();
					this._Password = value;
					this.SendPropertyChanged("Password");
					this.OnPasswordChanged();
				}
			}
		}
		
		[DataMember(Order=4)]
		public int AccountType
		{
			get
			{
				return this._AccountType;
			}
			set
			{
				if ((this._AccountType != value))
				{
					if (this._AccountTypeAccountType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAccountTypeChanging(value);
					this.SendPropertyChanging();
					this._AccountType = value;
					this.SendPropertyChanged("AccountType");
					this.OnAccountTypeChanged();
				}
			}
		}
		
		[DataMember(Order=5)]
		public System.Data.Linq.Binary Version
		{
			get
			{
				return this._Version;
			}
			set
			{
				if ((this._Version != value))
				{
					this.OnVersionChanging(value);
					this.SendPropertyChanging();
					this._Version = value;
					this.SendPropertyChanged("Version");
					this.OnVersionChanged();
				}
			}
		}
		
		[DataMember(Order=6)]
		public System.Nullable<System.DateTime> CreationDate
		{
			get
			{
				return this._CreationDate;
			}
			set
			{
				if ((this._CreationDate != value))
				{
					this.OnCreationDateChanging(value);
					this.SendPropertyChanging();
					this._CreationDate = value;
					this.SendPropertyChanged("CreationDate");
					this.OnCreationDateChanged();
				}
			}
		}
		
		[DataMember(Order=7)]
		public System.Nullable<bool> IsOAuth
		{
			get
			{
				return this._IsOAuth;
			}
			set
			{
				if ((this._IsOAuth != value))
				{
					this.OnIsOAuthChanging(value);
					this.SendPropertyChanging();
					this._IsOAuth = value;
					this.SendPropertyChanged("IsOAuth");
					this.OnIsOAuthChanged();
				}
			}
		}
		
		[DataMember(Order=8)]
		public string AccessToken
		{
			get
			{
				return this._AccessToken;
			}
			set
			{
				if ((this._AccessToken != value))
				{
					this.OnAccessTokenChanging(value);
					this.SendPropertyChanging();
					this._AccessToken = value;
					this.SendPropertyChanged("AccessToken");
					this.OnAccessTokenChanged();
				}
			}
		}
		
		[DataMember(Order=9)]
		public string AccessTokenSecret
		{
			get
			{
				return this._AccessTokenSecret;
			}
			set
			{
				if ((this._AccessTokenSecret != value))
				{
					this.OnAccessTokenSecretChanging(value);
					this.SendPropertyChanging();
					this._AccessTokenSecret = value;
					this.SendPropertyChanged("AccessTokenSecret");
					this.OnAccessTokenSecretChanged();
				}
			}
		}
		
		public AccountType AccountTypeAccountType
		{
			get
			{
				return this._AccountTypeAccountType.Entity;
			}
			set
			{
				AccountType previousValue = this._AccountTypeAccountType.Entity;
				if (((previousValue != value) 
							|| (this._AccountTypeAccountType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._AccountTypeAccountType.Entity = null;
						previousValue.Accounts.Remove(this);
					}
					this._AccountTypeAccountType.Entity = value;
					if ((value != null))
					{
						value.Accounts.Add(this);
						this._AccountType = value.Id;
					}
					else
					{
						this._AccountType = default(int);
					}
					this.SendPropertyChanged("AccountTypeAccountType");
				}
			}
		}
		
		[DataMember(Order=10, EmitDefaultValue=false)]
		public EntitySet<DirectMessage> DirectMessages
		{
			get
			{
				if ((this.serializing 
							&& (this._DirectMessages.HasLoadedOrAssignedValues == false)))
				{
					return null;
				}
				return this._DirectMessages;
			}
			set
			{
				this._DirectMessages.Assign(value);
			}
		}
		
		[DataMember(Order=11, EmitDefaultValue=false)]
		public EntitySet<AccountFilterMapping> AccountFilterMappings
		{
			get
			{
				if ((this.serializing 
							&& (this._AccountFilterMappings.HasLoadedOrAssignedValues == false)))
				{
					return null;
				}
				return this._AccountFilterMappings;
			}
			set
			{
				this._AccountFilterMappings.Assign(value);
			}
		}
		
		[DataMember(Order=12, EmitDefaultValue=false)]
		public EntitySet<Status> Status
		{
			get
			{
				if ((this.serializing 
							&& (this._Status.HasLoadedOrAssignedValues == false)))
				{
					return null;
				}
				return this._Status;
			}
			set
			{
				this._Status.Assign(value);
			}
		}
		
		[DataMember(Order=13, EmitDefaultValue=false)]
		public EntitySet<UserProfile> UserProfiles
		{
			get
			{
				if ((this.serializing 
							&& (this._UserProfiles.HasLoadedOrAssignedValues == false)))
				{
					return null;
				}
				return this._UserProfiles;
			}
			set
			{
				this._UserProfiles.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_DirectMessages(DirectMessage entity)
		{
			this.SendPropertyChanging();
			entity.Account = this;
		}
		
		private void detach_DirectMessages(DirectMessage entity)
		{
			this.SendPropertyChanging();
			entity.Account = null;
		}
		
		private void attach_AccountFilterMappings(AccountFilterMapping entity)
		{
			this.SendPropertyChanging();
			entity.Account = this;
		}
		
		private void detach_AccountFilterMappings(AccountFilterMapping entity)
		{
			this.SendPropertyChanging();
			entity.Account = null;
		}
		
		private void attach_Status(Status entity)
		{
			this.SendPropertyChanging();
			entity.Account = this;
		}
		
		private void detach_Status(Status entity)
		{
			this.SendPropertyChanging();
			entity.Account = null;
		}
		
		private void attach_UserProfiles(UserProfile entity)
		{
			this.SendPropertyChanging();
			entity.Account = this;
		}
		
		private void detach_UserProfiles(UserProfile entity)
		{
			this.SendPropertyChanging();
			entity.Account = null;
		}
		
		private void Initialize()
		{
			this._AccountTypeAccountType = default(EntityRef<AccountType>);
			this._DirectMessages = new EntitySet<DirectMessage>(new Action<DirectMessage>(this.attach_DirectMessages), new Action<DirectMessage>(this.detach_DirectMessages));
			this._AccountFilterMappings = new EntitySet<AccountFilterMapping>(new Action<AccountFilterMapping>(this.attach_AccountFilterMappings), new Action<AccountFilterMapping>(this.detach_AccountFilterMappings));
			this._Status = new EntitySet<Status>(new Action<Status>(this.attach_Status), new Action<Status>(this.detach_Status));
			this._UserProfiles = new EntitySet<UserProfile>(new Action<UserProfile>(this.attach_UserProfiles), new Action<UserProfile>(this.detach_UserProfiles));
			OnCreated();
		}
		
		[OnDeserializing()]
		[System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnDeserializing(StreamingContext context)
		{
			this.Initialize();
		}
		
		[OnSerializing()]
		[System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnSerializing(StreamingContext context)
		{
			this.serializing = true;
		}
		
		[OnSerialized()]
		[System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnSerialized(StreamingContext context)
		{
			this.serializing = false;
		}
	}
	
	[DataContract()]
	public partial class AccountFilterMapping : TOBEntityBase, INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private System.Nullable<int> _FilterId;
		
		private System.Nullable<int> _AccountId;
		
		private EntityRef<Account> _Account;
		
		private EntityRef<SavedFilter> _SavedFilter;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnFilterIdChanging(System.Nullable<int> value);
    partial void OnFilterIdChanged();
    partial void OnAccountIdChanging(System.Nullable<int> value);
    partial void OnAccountIdChanged();
    #endregion
		
		public AccountFilterMapping()
		{
			this.Initialize();
		}
		
		[DataMember(Order=1)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[DataMember(Order=2)]
		public System.Nullable<int> FilterId
		{
			get
			{
				return this._FilterId;
			}
			set
			{
				if ((this._FilterId != value))
				{
					if (this._SavedFilter.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFilterIdChanging(value);
					this.SendPropertyChanging();
					this._FilterId = value;
					this.SendPropertyChanged("FilterId");
					this.OnFilterIdChanged();
				}
			}
		}
		
		[DataMember(Order=3)]
		public System.Nullable<int> AccountId
		{
			get
			{
				return this._AccountId;
			}
			set
			{
				if ((this._AccountId != value))
				{
					if (this._Account.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAccountIdChanging(value);
					this.SendPropertyChanging();
					this._AccountId = value;
					this.SendPropertyChanged("AccountId");
					this.OnAccountIdChanged();
				}
			}
		}
		
		public Account Account
		{
			get
			{
				return this._Account.Entity;
			}
			set
			{
				Account previousValue = this._Account.Entity;
				if (((previousValue != value) 
							|| (this._Account.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Account.Entity = null;
						previousValue.AccountFilterMappings.Remove(this);
					}
					this._Account.Entity = value;
					if ((value != null))
					{
						value.AccountFilterMappings.Add(this);
						this._AccountId = value.Id;
					}
					else
					{
						this._AccountId = default(Nullable<int>);
					}
					this.SendPropertyChanged("Account");
				}
			}
		}
		
		public SavedFilter SavedFilter
		{
			get
			{
				return this._SavedFilter.Entity;
			}
			set
			{
				SavedFilter previousValue = this._SavedFilter.Entity;
				if (((previousValue != value) 
							|| (this._SavedFilter.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._SavedFilter.Entity = null;
						previousValue.AccountFilterMappings.Remove(this);
					}
					this._SavedFilter.Entity = value;
					if ((value != null))
					{
						value.AccountFilterMappings.Add(this);
						this._FilterId = value.Id;
					}
					else
					{
						this._FilterId = default(Nullable<int>);
					}
					this.SendPropertyChanged("SavedFilter");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void Initialize()
		{
			this._Account = default(EntityRef<Account>);
			this._SavedFilter = default(EntityRef<SavedFilter>);
			OnCreated();
		}
		
		[OnDeserializing()]
		[System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnDeserializing(StreamingContext context)
		{
			this.Initialize();
		}
	}
	
	[DataContract()]
	public partial class AccountType : TOBEntityBase, INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Name;
		
		private EntitySet<Account> _Accounts;
		
		private bool serializing;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public AccountType()
		{
			this.Initialize();
		}
		
		[DataMember(Order=1)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[DataMember(Order=2)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[DataMember(Order=3, EmitDefaultValue=false)]
		public EntitySet<Account> Accounts
		{
			get
			{
				if ((this.serializing 
							&& (this._Accounts.HasLoadedOrAssignedValues == false)))
				{
					return null;
				}
				return this._Accounts;
			}
			set
			{
				this._Accounts.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Accounts(Account entity)
		{
			this.SendPropertyChanging();
			entity.AccountTypeAccountType = this;
		}
		
		private void detach_Accounts(Account entity)
		{
			this.SendPropertyChanging();
			entity.AccountTypeAccountType = null;
		}
		
		private void Initialize()
		{
			this._Accounts = new EntitySet<Account>(new Action<Account>(this.attach_Accounts), new Action<Account>(this.detach_Accounts));
			OnCreated();
		}
		
		[OnDeserializing()]
		[System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnDeserializing(StreamingContext context)
		{
			this.Initialize();
		}
		
		[OnSerializing()]
		[System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnSerializing(StreamingContext context)
		{
			this.serializing = true;
		}
		
		[OnSerialized()]
		[System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnSerialized(StreamingContext context)
		{
			this.serializing = false;
		}
	}
	
	[DataContract()]
	public partial class DirectMessage : TOBEntityBase, INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private System.Nullable<long> _TwitterId;
		
		private System.Nullable<long> _SenderId;
		
		private string _Text;
		
		private System.Nullable<System.DateTime> _TwitterCreatedDate;
		
		private System.Nullable<System.DateTime> _CreationTime;
		
		private System.Nullable<int> _UserProfileId;
		
		private System.Nullable<int> _AccountId;
		
		private System.Nullable<bool> _Recieved;
		
		private string _UserScreenName;
		
		private System.Nullable<bool> _IsRead;
		
		private EntityRef<Account> _Account;
		
		private EntityRef<UserProfile> _UserProfile;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnTwitterIdChanging(System.Nullable<long> value);
    partial void OnTwitterIdChanged();
    partial void OnSenderIdChanging(System.Nullable<long> value);
    partial void OnSenderIdChanged();
    partial void OnTextChanging(string value);
    partial void OnTextChanged();
    partial void OnTwitterCreatedDateChanging(System.Nullable<System.DateTime> value);
    partial void OnTwitterCreatedDateChanged();
    partial void OnCreationTimeChanging(System.Nullable<System.DateTime> value);
    partial void OnCreationTimeChanged();
    partial void OnUserProfileIdChanging(System.Nullable<int> value);
    partial void OnUserProfileIdChanged();
    partial void OnAccountIdChanging(System.Nullable<int> value);
    partial void OnAccountIdChanged();
    partial void OnRecievedChanging(System.Nullable<bool> value);
    partial void OnRecievedChanged();
    partial void OnUserScreenNameChanging(string value);
    partial void OnUserScreenNameChanged();
    partial void OnIsReadChanging(System.Nullable<bool> value);
    partial void OnIsReadChanged();
    #endregion
		
		public DirectMessage()
		{
			this.Initialize();
		}
		
		[DataMember(Order=1)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[DataMember(Order=2)]
		public System.Nullable<long> TwitterId
		{
			get
			{
				return this._TwitterId;
			}
			set
			{
				if ((this._TwitterId != value))
				{
					this.OnTwitterIdChanging(value);
					this.SendPropertyChanging();
					this._TwitterId = value;
					this.SendPropertyChanged("TwitterId");
					this.OnTwitterIdChanged();
				}
			}
		}
		
		[DataMember(Order=3)]
		public System.Nullable<long> SenderId
		{
			get
			{
				return this._SenderId;
			}
			set
			{
				if ((this._SenderId != value))
				{
					this.OnSenderIdChanging(value);
					this.SendPropertyChanging();
					this._SenderId = value;
					this.SendPropertyChanged("SenderId");
					this.OnSenderIdChanged();
				}
			}
		}
		
		[DataMember(Order=4)]
		public string Text
		{
			get
			{
				return this._Text;
			}
			set
			{
				if ((this._Text != value))
				{
					this.OnTextChanging(value);
					this.SendPropertyChanging();
					this._Text = value;
					this.SendPropertyChanged("Text");
					this.OnTextChanged();
				}
			}
		}
		
		[DataMember(Order=5)]
		public System.Nullable<System.DateTime> TwitterCreatedDate
		{
			get
			{
				return this._TwitterCreatedDate;
			}
			set
			{
				if ((this._TwitterCreatedDate != value))
				{
					this.OnTwitterCreatedDateChanging(value);
					this.SendPropertyChanging();
					this._TwitterCreatedDate = value;
					this.SendPropertyChanged("TwitterCreatedDate");
					this.OnTwitterCreatedDateChanged();
				}
			}
		}
		
		[DataMember(Order=6)]
		public System.Nullable<System.DateTime> CreationTime
		{
			get
			{
				return this._CreationTime;
			}
			set
			{
				if ((this._CreationTime != value))
				{
					this.OnCreationTimeChanging(value);
					this.SendPropertyChanging();
					this._CreationTime = value;
					this.SendPropertyChanged("CreationTime");
					this.OnCreationTimeChanged();
				}
			}
		}
		
		[DataMember(Order=7)]
		public System.Nullable<int> UserProfileId
		{
			get
			{
				return this._UserProfileId;
			}
			set
			{
				if ((this._UserProfileId != value))
				{
					if (this._UserProfile.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserProfileIdChanging(value);
					this.SendPropertyChanging();
					this._UserProfileId = value;
					this.SendPropertyChanged("UserProfileId");
					this.OnUserProfileIdChanged();
				}
			}
		}
		
		[DataMember(Order=8)]
		public System.Nullable<int> AccountId
		{
			get
			{
				return this._AccountId;
			}
			set
			{
				if ((this._AccountId != value))
				{
					if (this._Account.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAccountIdChanging(value);
					this.SendPropertyChanging();
					this._AccountId = value;
					this.SendPropertyChanged("AccountId");
					this.OnAccountIdChanged();
				}
			}
		}
		
		[DataMember(Order=9)]
		public System.Nullable<bool> Recieved
		{
			get
			{
				return this._Recieved;
			}
			set
			{
				if ((this._Recieved != value))
				{
					this.OnRecievedChanging(value);
					this.SendPropertyChanging();
					this._Recieved = value;
					this.SendPropertyChanged("Recieved");
					this.OnRecievedChanged();
				}
			}
		}
		
		[DataMember(Order=10)]
		public string UserScreenName
		{
			get
			{
				return this._UserScreenName;
			}
			set
			{
				if ((this._UserScreenName != value))
				{
					this.OnUserScreenNameChanging(value);
					this.SendPropertyChanging();
					this._UserScreenName = value;
					this.SendPropertyChanged("UserScreenName");
					this.OnUserScreenNameChanged();
				}
			}
		}
		
		[DataMember(Order=11)]
		public System.Nullable<bool> IsRead
		{
			get
			{
				return this._IsRead;
			}
			set
			{
				if ((this._IsRead != value))
				{
					this.OnIsReadChanging(value);
					this.SendPropertyChanging();
					this._IsRead = value;
					this.SendPropertyChanged("IsRead");
					this.OnIsReadChanged();
				}
			}
		}
		
		public Account Account
		{
			get
			{
				return this._Account.Entity;
			}
			set
			{
				Account previousValue = this._Account.Entity;
				if (((previousValue != value) 
							|| (this._Account.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Account.Entity = null;
						previousValue.DirectMessages.Remove(this);
					}
					this._Account.Entity = value;
					if ((value != null))
					{
						value.DirectMessages.Add(this);
						this._AccountId = value.Id;
					}
					else
					{
						this._AccountId = default(Nullable<int>);
					}
					this.SendPropertyChanged("Account");
				}
			}
		}
		
		public UserProfile UserProfile
		{
			get
			{
				return this._UserProfile.Entity;
			}
			set
			{
				UserProfile previousValue = this._UserProfile.Entity;
				if (((previousValue != value) 
							|| (this._UserProfile.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._UserProfile.Entity = null;
						previousValue.DirectMessages.Remove(this);
					}
					this._UserProfile.Entity = value;
					if ((value != null))
					{
						value.DirectMessages.Add(this);
						this._UserProfileId = value.Id;
					}
					else
					{
						this._UserProfileId = default(Nullable<int>);
					}
					this.SendPropertyChanged("UserProfile");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void Initialize()
		{
			this._Account = default(EntityRef<Account>);
			this._UserProfile = default(EntityRef<UserProfile>);
			OnCreated();
		}
		
		[OnDeserializing()]
		[System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnDeserializing(StreamingContext context)
		{
			this.Initialize();
		}
	}
	
	[DataContract()]
	public partial class PanelType : TOBEntityBase, INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Name;
		
		private EntitySet<SavedFilter> _SavedFilters;
		
		private bool serializing;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public PanelType()
		{
			this.Initialize();
		}
		
		[DataMember(Order=1)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[DataMember(Order=2)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[DataMember(Order=3, EmitDefaultValue=false)]
		public EntitySet<SavedFilter> SavedFilters
		{
			get
			{
				if ((this.serializing 
							&& (this._SavedFilters.HasLoadedOrAssignedValues == false)))
				{
					return null;
				}
				return this._SavedFilters;
			}
			set
			{
				this._SavedFilters.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_SavedFilters(SavedFilter entity)
		{
			this.SendPropertyChanging();
			entity.PanelType = this;
		}
		
		private void detach_SavedFilters(SavedFilter entity)
		{
			this.SendPropertyChanging();
			entity.PanelType = null;
		}
		
		private void Initialize()
		{
			this._SavedFilters = new EntitySet<SavedFilter>(new Action<SavedFilter>(this.attach_SavedFilters), new Action<SavedFilter>(this.detach_SavedFilters));
			OnCreated();
		}
		
		[OnDeserializing()]
		[System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnDeserializing(StreamingContext context)
		{
			this.Initialize();
		}
		
		[OnSerializing()]
		[System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnSerializing(StreamingContext context)
		{
			this.serializing = true;
		}
		
		[OnSerialized()]
		[System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnSerialized(StreamingContext context)
		{
			this.serializing = false;
		}
	}
	
	[DataContract()]
	public partial class SavedFilter : TOBEntityBase, INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _FilterText;
		
		private System.Nullable<int> _PanelTypeId;
		
		private EntitySet<AccountFilterMapping> _AccountFilterMappings;
		
		private EntityRef<PanelType> _PanelType;
		
		private bool serializing;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnFilterTextChanging(string value);
    partial void OnFilterTextChanged();
    partial void OnPanelTypeIdChanging(System.Nullable<int> value);
    partial void OnPanelTypeIdChanged();
    #endregion
		
		public SavedFilter()
		{
			this.Initialize();
		}
		
		[DataMember(Order=1)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[DataMember(Order=2)]
		public string FilterText
		{
			get
			{
				return this._FilterText;
			}
			set
			{
				if ((this._FilterText != value))
				{
					this.OnFilterTextChanging(value);
					this.SendPropertyChanging();
					this._FilterText = value;
					this.SendPropertyChanged("FilterText");
					this.OnFilterTextChanged();
				}
			}
		}
		
		[DataMember(Order=3)]
		public System.Nullable<int> PanelTypeId
		{
			get
			{
				return this._PanelTypeId;
			}
			set
			{
				if ((this._PanelTypeId != value))
				{
					if (this._PanelType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPanelTypeIdChanging(value);
					this.SendPropertyChanging();
					this._PanelTypeId = value;
					this.SendPropertyChanged("PanelTypeId");
					this.OnPanelTypeIdChanged();
				}
			}
		}
		
		[DataMember(Order=4, EmitDefaultValue=false)]
		public EntitySet<AccountFilterMapping> AccountFilterMappings
		{
			get
			{
				if ((this.serializing 
							&& (this._AccountFilterMappings.HasLoadedOrAssignedValues == false)))
				{
					return null;
				}
				return this._AccountFilterMappings;
			}
			set
			{
				this._AccountFilterMappings.Assign(value);
			}
		}
		
		public PanelType PanelType
		{
			get
			{
				return this._PanelType.Entity;
			}
			set
			{
				PanelType previousValue = this._PanelType.Entity;
				if (((previousValue != value) 
							|| (this._PanelType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._PanelType.Entity = null;
						previousValue.SavedFilters.Remove(this);
					}
					this._PanelType.Entity = value;
					if ((value != null))
					{
						value.SavedFilters.Add(this);
						this._PanelTypeId = value.Id;
					}
					else
					{
						this._PanelTypeId = default(Nullable<int>);
					}
					this.SendPropertyChanged("PanelType");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_AccountFilterMappings(AccountFilterMapping entity)
		{
			this.SendPropertyChanging();
			entity.SavedFilter = this;
		}
		
		private void detach_AccountFilterMappings(AccountFilterMapping entity)
		{
			this.SendPropertyChanging();
			entity.SavedFilter = null;
		}
		
		private void Initialize()
		{
			this._AccountFilterMappings = new EntitySet<AccountFilterMapping>(new Action<AccountFilterMapping>(this.attach_AccountFilterMappings), new Action<AccountFilterMapping>(this.detach_AccountFilterMappings));
			this._PanelType = default(EntityRef<PanelType>);
			OnCreated();
		}
		
		[OnDeserializing()]
		[System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnDeserializing(StreamingContext context)
		{
			this.Initialize();
		}
		
		[OnSerializing()]
		[System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnSerializing(StreamingContext context)
		{
			this.serializing = true;
		}
		
		[OnSerialized()]
		[System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnSerialized(StreamingContext context)
		{
			this.serializing = false;
		}
	}
	
	[DataContract()]
	public partial class SavedPluginView : TOBEntityBase, INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private System.Nullable<System.Guid> _PluginId;
		
		private string _PluginName;
		
		private string _PluginStream;
		
		private System.Nullable<int> _PluginStreamType;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnPluginIdChanging(System.Nullable<System.Guid> value);
    partial void OnPluginIdChanged();
    partial void OnPluginNameChanging(string value);
    partial void OnPluginNameChanged();
    partial void OnPluginStreamChanging(string value);
    partial void OnPluginStreamChanged();
    partial void OnPluginStreamTypeChanging(System.Nullable<int> value);
    partial void OnPluginStreamTypeChanged();
    #endregion
		
		public SavedPluginView()
		{
			this.Initialize();
		}
		
		[DataMember(Order=1)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[DataMember(Order=2)]
		public System.Nullable<System.Guid> PluginId
		{
			get
			{
				return this._PluginId;
			}
			set
			{
				if ((this._PluginId != value))
				{
					this.OnPluginIdChanging(value);
					this.SendPropertyChanging();
					this._PluginId = value;
					this.SendPropertyChanged("PluginId");
					this.OnPluginIdChanged();
				}
			}
		}
		
		[DataMember(Order=3)]
		public string PluginName
		{
			get
			{
				return this._PluginName;
			}
			set
			{
				if ((this._PluginName != value))
				{
					this.OnPluginNameChanging(value);
					this.SendPropertyChanging();
					this._PluginName = value;
					this.SendPropertyChanged("PluginName");
					this.OnPluginNameChanged();
				}
			}
		}
		
		[DataMember(Order=4)]
		public string PluginStream
		{
			get
			{
				return this._PluginStream;
			}
			set
			{
				if ((this._PluginStream != value))
				{
					this.OnPluginStreamChanging(value);
					this.SendPropertyChanging();
					this._PluginStream = value;
					this.SendPropertyChanged("PluginStream");
					this.OnPluginStreamChanged();
				}
			}
		}
		
		[DataMember(Order=5)]
		public System.Nullable<int> PluginStreamType
		{
			get
			{
				return this._PluginStreamType;
			}
			set
			{
				if ((this._PluginStreamType != value))
				{
					this.OnPluginStreamTypeChanging(value);
					this.SendPropertyChanging();
					this._PluginStreamType = value;
					this.SendPropertyChanged("PluginStreamType");
					this.OnPluginStreamTypeChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void Initialize()
		{
			OnCreated();
		}
		
		[OnDeserializing()]
		[System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnDeserializing(StreamingContext context)
		{
			this.Initialize();
		}
	}
	
	[DataContract()]
	public partial class SavedSearch : TOBEntityBase, INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _SearchText;
		
		private string _SQLQuery;
		
		private string _Name;
		
		private System.Data.Linq.Binary _Version;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnSearchTextChanging(string value);
    partial void OnSearchTextChanged();
    partial void OnSQLQueryChanging(string value);
    partial void OnSQLQueryChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnVersionChanging(System.Data.Linq.Binary value);
    partial void OnVersionChanged();
    #endregion
		
		public SavedSearch()
		{
			this.Initialize();
		}
		
		[DataMember(Order=1)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[DataMember(Order=2)]
		public string SearchText
		{
			get
			{
				return this._SearchText;
			}
			set
			{
				if ((this._SearchText != value))
				{
					this.OnSearchTextChanging(value);
					this.SendPropertyChanging();
					this._SearchText = value;
					this.SendPropertyChanged("SearchText");
					this.OnSearchTextChanged();
				}
			}
		}
		
		[DataMember(Order=3)]
		public string SQLQuery
		{
			get
			{
				return this._SQLQuery;
			}
			set
			{
				if ((this._SQLQuery != value))
				{
					this.OnSQLQueryChanging(value);
					this.SendPropertyChanging();
					this._SQLQuery = value;
					this.SendPropertyChanged("SQLQuery");
					this.OnSQLQueryChanged();
				}
			}
		}
		
		[DataMember(Order=4)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[DataMember(Order=5)]
		public System.Data.Linq.Binary Version
		{
			get
			{
				return this._Version;
			}
			set
			{
				if ((this._Version != value))
				{
					this.OnVersionChanging(value);
					this.SendPropertyChanging();
					this._Version = value;
					this.SendPropertyChanged("Version");
					this.OnVersionChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void Initialize()
		{
			OnCreated();
		}
		
		[OnDeserializing()]
		[System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnDeserializing(StreamingContext context)
		{
			this.Initialize();
		}
	}
	
	[DataContract()]
	public partial class Status : TOBEntityBase, INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private System.Nullable<long> _TwitterStatusId;
		
		private System.Nullable<long> _InReplyToStatusId;
		
		private System.Nullable<int> _InReplyToUserId;
		
		private System.Nullable<bool> _IsFavorited;
		
		private System.Nullable<bool> _IsTruncated;
		
		private string _Source;
		
		private string _Text;
		
		private System.Nullable<int> _TwitterUserId;
		
		private System.Nullable<System.DateTime> _CreationDate;
		
		private System.Nullable<int> _UserProfileId;
		
		private System.Nullable<System.DateTime> _TwitterCreatedDate;
		
		private System.Data.Linq.Binary _Version;
		
		private System.Nullable<int> _AccountId;
		
		private System.Nullable<double> _Latitude;
		
		private System.Nullable<double> _Longitude;
		
		private System.Nullable<bool> _IsRead;
		
		private EntityRef<Account> _Account;
		
		private EntityRef<UserProfile> _UserProfile;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnTwitterStatusIdChanging(System.Nullable<long> value);
    partial void OnTwitterStatusIdChanged();
    partial void OnInReplyToStatusIdChanging(System.Nullable<long> value);
    partial void OnInReplyToStatusIdChanged();
    partial void OnInReplyToUserIdChanging(System.Nullable<int> value);
    partial void OnInReplyToUserIdChanged();
    partial void OnIsFavoritedChanging(System.Nullable<bool> value);
    partial void OnIsFavoritedChanged();
    partial void OnIsTruncatedChanging(System.Nullable<bool> value);
    partial void OnIsTruncatedChanged();
    partial void OnSourceChanging(string value);
    partial void OnSourceChanged();
    partial void OnTextChanging(string value);
    partial void OnTextChanged();
    partial void OnTwitterUserIdChanging(System.Nullable<int> value);
    partial void OnTwitterUserIdChanged();
    partial void OnCreationDateChanging(System.Nullable<System.DateTime> value);
    partial void OnCreationDateChanged();
    partial void OnUserProfileIdChanging(System.Nullable<int> value);
    partial void OnUserProfileIdChanged();
    partial void OnTwitterCreatedDateChanging(System.Nullable<System.DateTime> value);
    partial void OnTwitterCreatedDateChanged();
    partial void OnVersionChanging(System.Data.Linq.Binary value);
    partial void OnVersionChanged();
    partial void OnAccountIdChanging(System.Nullable<int> value);
    partial void OnAccountIdChanged();
    partial void OnLatitudeChanging(System.Nullable<double> value);
    partial void OnLatitudeChanged();
    partial void OnLongitudeChanging(System.Nullable<double> value);
    partial void OnLongitudeChanged();
    partial void OnIsReadChanging(System.Nullable<bool> value);
    partial void OnIsReadChanged();
    #endregion
		
		public Status()
		{
			this.Initialize();
		}
		
		[DataMember(Order=1)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[DataMember(Order=2)]
		public System.Nullable<long> TwitterStatusId
		{
			get
			{
				return this._TwitterStatusId;
			}
			set
			{
				if ((this._TwitterStatusId != value))
				{
					this.OnTwitterStatusIdChanging(value);
					this.SendPropertyChanging();
					this._TwitterStatusId = value;
					this.SendPropertyChanged("TwitterStatusId");
					this.OnTwitterStatusIdChanged();
				}
			}
		}
		
		[DataMember(Order=3)]
		public System.Nullable<long> InReplyToStatusId
		{
			get
			{
				return this._InReplyToStatusId;
			}
			set
			{
				if ((this._InReplyToStatusId != value))
				{
					this.OnInReplyToStatusIdChanging(value);
					this.SendPropertyChanging();
					this._InReplyToStatusId = value;
					this.SendPropertyChanged("InReplyToStatusId");
					this.OnInReplyToStatusIdChanged();
				}
			}
		}
		
		[DataMember(Order=4)]
		public System.Nullable<int> InReplyToUserId
		{
			get
			{
				return this._InReplyToUserId;
			}
			set
			{
				if ((this._InReplyToUserId != value))
				{
					this.OnInReplyToUserIdChanging(value);
					this.SendPropertyChanging();
					this._InReplyToUserId = value;
					this.SendPropertyChanged("InReplyToUserId");
					this.OnInReplyToUserIdChanged();
				}
			}
		}
		
		[DataMember(Order=5)]
		public System.Nullable<bool> IsFavorited
		{
			get
			{
				return this._IsFavorited;
			}
			set
			{
				if ((this._IsFavorited != value))
				{
					this.OnIsFavoritedChanging(value);
					this.SendPropertyChanging();
					this._IsFavorited = value;
					this.SendPropertyChanged("IsFavorited");
					this.OnIsFavoritedChanged();
				}
			}
		}
		
		[DataMember(Order=6)]
		public System.Nullable<bool> IsTruncated
		{
			get
			{
				return this._IsTruncated;
			}
			set
			{
				if ((this._IsTruncated != value))
				{
					this.OnIsTruncatedChanging(value);
					this.SendPropertyChanging();
					this._IsTruncated = value;
					this.SendPropertyChanged("IsTruncated");
					this.OnIsTruncatedChanged();
				}
			}
		}
		
		[DataMember(Order=7)]
		public string Source
		{
			get
			{
				return this._Source;
			}
			set
			{
				if ((this._Source != value))
				{
					this.OnSourceChanging(value);
					this.SendPropertyChanging();
					this._Source = value;
					this.SendPropertyChanged("Source");
					this.OnSourceChanged();
				}
			}
		}
		
		[DataMember(Order=8)]
		public string Text
		{
			get
			{
				return this._Text;
			}
			set
			{
				if ((this._Text != value))
				{
					this.OnTextChanging(value);
					this.SendPropertyChanging();
					this._Text = value;
					this.SendPropertyChanged("Text");
					this.OnTextChanged();
				}
			}
		}
		
		[DataMember(Order=9)]
		public System.Nullable<int> TwitterUserId
		{
			get
			{
				return this._TwitterUserId;
			}
			set
			{
				if ((this._TwitterUserId != value))
				{
					this.OnTwitterUserIdChanging(value);
					this.SendPropertyChanging();
					this._TwitterUserId = value;
					this.SendPropertyChanged("TwitterUserId");
					this.OnTwitterUserIdChanged();
				}
			}
		}
		
		[DataMember(Order=10)]
		public System.Nullable<System.DateTime> CreationDate
		{
			get
			{
				return this._CreationDate;
			}
			set
			{
				if ((this._CreationDate != value))
				{
					this.OnCreationDateChanging(value);
					this.SendPropertyChanging();
					this._CreationDate = value;
					this.SendPropertyChanged("CreationDate");
					this.OnCreationDateChanged();
				}
			}
		}
		
		[DataMember(Order=11)]
		public System.Nullable<int> UserProfileId
		{
			get
			{
				return this._UserProfileId;
			}
			set
			{
				if ((this._UserProfileId != value))
				{
					if (this._UserProfile.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserProfileIdChanging(value);
					this.SendPropertyChanging();
					this._UserProfileId = value;
					this.SendPropertyChanged("UserProfileId");
					this.OnUserProfileIdChanged();
				}
			}
		}
		
		[DataMember(Order=12)]
		public System.Nullable<System.DateTime> TwitterCreatedDate
		{
			get
			{
				return this._TwitterCreatedDate;
			}
			set
			{
				if ((this._TwitterCreatedDate != value))
				{
					this.OnTwitterCreatedDateChanging(value);
					this.SendPropertyChanging();
					this._TwitterCreatedDate = value;
					this.SendPropertyChanged("TwitterCreatedDate");
					this.OnTwitterCreatedDateChanged();
				}
			}
		}
		
		[DataMember(Order=13)]
		public System.Data.Linq.Binary Version
		{
			get
			{
				return this._Version;
			}
			set
			{
				if ((this._Version != value))
				{
					this.OnVersionChanging(value);
					this.SendPropertyChanging();
					this._Version = value;
					this.SendPropertyChanged("Version");
					this.OnVersionChanged();
				}
			}
		}
		
		[DataMember(Order=14)]
		public System.Nullable<int> AccountId
		{
			get
			{
				return this._AccountId;
			}
			set
			{
				if ((this._AccountId != value))
				{
					if (this._Account.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAccountIdChanging(value);
					this.SendPropertyChanging();
					this._AccountId = value;
					this.SendPropertyChanged("AccountId");
					this.OnAccountIdChanged();
				}
			}
		}
		
		[DataMember(Order=15)]
		public System.Nullable<double> Latitude
		{
			get
			{
				return this._Latitude;
			}
			set
			{
				if ((this._Latitude != value))
				{
					this.OnLatitudeChanging(value);
					this.SendPropertyChanging();
					this._Latitude = value;
					this.SendPropertyChanged("Latitude");
					this.OnLatitudeChanged();
				}
			}
		}
		
		[DataMember(Order=16)]
		public System.Nullable<double> Longitude
		{
			get
			{
				return this._Longitude;
			}
			set
			{
				if ((this._Longitude != value))
				{
					this.OnLongitudeChanging(value);
					this.SendPropertyChanging();
					this._Longitude = value;
					this.SendPropertyChanged("Longitude");
					this.OnLongitudeChanged();
				}
			}
		}
		
		[DataMember(Order=17)]
		public System.Nullable<bool> IsRead
		{
			get
			{
				return this._IsRead;
			}
			set
			{
				if ((this._IsRead != value))
				{
					this.OnIsReadChanging(value);
					this.SendPropertyChanging();
					this._IsRead = value;
					this.SendPropertyChanged("IsRead");
					this.OnIsReadChanged();
				}
			}
		}
		
		public Account Account
		{
			get
			{
				return this._Account.Entity;
			}
			set
			{
				Account previousValue = this._Account.Entity;
				if (((previousValue != value) 
							|| (this._Account.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Account.Entity = null;
						previousValue.Status.Remove(this);
					}
					this._Account.Entity = value;
					if ((value != null))
					{
						value.Status.Add(this);
						this._AccountId = value.Id;
					}
					else
					{
						this._AccountId = default(Nullable<int>);
					}
					this.SendPropertyChanged("Account");
				}
			}
		}
		
		public UserProfile UserProfile
		{
			get
			{
				return this._UserProfile.Entity;
			}
			set
			{
				UserProfile previousValue = this._UserProfile.Entity;
				if (((previousValue != value) 
							|| (this._UserProfile.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._UserProfile.Entity = null;
						previousValue.Status.Remove(this);
					}
					this._UserProfile.Entity = value;
					if ((value != null))
					{
						value.Status.Add(this);
						this._UserProfileId = value.Id;
					}
					else
					{
						this._UserProfileId = default(Nullable<int>);
					}
					this.SendPropertyChanged("UserProfile");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void Initialize()
		{
			this._Account = default(EntityRef<Account>);
			this._UserProfile = default(EntityRef<UserProfile>);
			OnCreated();
		}
		
		[OnDeserializing()]
		[System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnDeserializing(StreamingContext context)
		{
			this.Initialize();
		}
	}
	
	[DataContract()]
	public partial class TOBRegister : TOBEntityBase, INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private System.Nullable<System.Guid> _RegisterId;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnRegisterIdChanging(System.Nullable<System.Guid> value);
    partial void OnRegisterIdChanged();
    #endregion
		
		public TOBRegister()
		{
			this.Initialize();
		}
		
		[DataMember(Order=1)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[DataMember(Order=2)]
		public System.Nullable<System.Guid> RegisterId
		{
			get
			{
				return this._RegisterId;
			}
			set
			{
				if ((this._RegisterId != value))
				{
					this.OnRegisterIdChanging(value);
					this.SendPropertyChanging();
					this._RegisterId = value;
					this.SendPropertyChanged("RegisterId");
					this.OnRegisterIdChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void Initialize()
		{
			OnCreated();
		}
		
		[OnDeserializing()]
		[System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnDeserializing(StreamingContext context)
		{
			this.Initialize();
		}
	}
	
	[DataContract()]
	public partial class UserProfile : TOBEntityBase, INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _Name;
		
		private string _ScreenName;
		
		private string _Description;
		
		private string _ProfileImageUrl;
		
		private string _UserUrl;
		
		private System.Nullable<bool> _IsProtected;
		
		private System.Nullable<int> _FollowersCount;
		
		private System.Nullable<int> _UserId;
		
		private string _Location;
		
		private System.Nullable<System.DateTime> _TwitterCreatedDate;
		
		private System.Nullable<int> _FavouritesCount;
		
		private System.Nullable<int> _FriendsCount;
		
		private System.Nullable<bool> _HasNotifications;
		
		private System.Nullable<bool> _IsFollowing;
		
		private System.Nullable<bool> _IsVerified;
		
		private System.Nullable<bool> _IsProfileBackgroundTiled;
		
		private string _ProfileBackgroundColor;
		
		private string _ProfileBackgroundImageUrl;
		
		private string _ProfileLinkColor;
		
		private string _ProfileSidebarBorderColor;
		
		private string _ProfileSidebarFillColor;
		
		private string _ProfileTextColor;
		
		private System.Nullable<int> _StatusesCount;
		
		private string _TimeZone;
		
		private string _UtcOffset;
		
		private System.Nullable<int> _AccountId;
		
		private int _Id;
		
		private System.Nullable<System.DateTime> _CreationDate;
		
		private System.Data.Linq.Binary _Version;
		
		private System.Nullable<bool> _IsFollower;
		
		private System.Nullable<System.DateTime> _LastUpdated;
		
		private EntitySet<DirectMessage> _DirectMessages;
		
		private EntitySet<Status> _Status;
		
		private EntityRef<Account> _Account;
		
		private bool serializing;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnScreenNameChanging(string value);
    partial void OnScreenNameChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnProfileImageUrlChanging(string value);
    partial void OnProfileImageUrlChanged();
    partial void OnUserUrlChanging(string value);
    partial void OnUserUrlChanged();
    partial void OnIsProtectedChanging(System.Nullable<bool> value);
    partial void OnIsProtectedChanged();
    partial void OnFollowersCountChanging(System.Nullable<int> value);
    partial void OnFollowersCountChanged();
    partial void OnUserIdChanging(System.Nullable<int> value);
    partial void OnUserIdChanged();
    partial void OnLocationChanging(string value);
    partial void OnLocationChanged();
    partial void OnTwitterCreatedDateChanging(System.Nullable<System.DateTime> value);
    partial void OnTwitterCreatedDateChanged();
    partial void OnFavouritesCountChanging(System.Nullable<int> value);
    partial void OnFavouritesCountChanged();
    partial void OnFriendsCountChanging(System.Nullable<int> value);
    partial void OnFriendsCountChanged();
    partial void OnHasNotificationsChanging(System.Nullable<bool> value);
    partial void OnHasNotificationsChanged();
    partial void OnIsFollowingChanging(System.Nullable<bool> value);
    partial void OnIsFollowingChanged();
    partial void OnIsVerifiedChanging(System.Nullable<bool> value);
    partial void OnIsVerifiedChanged();
    partial void OnIsProfileBackgroundTiledChanging(System.Nullable<bool> value);
    partial void OnIsProfileBackgroundTiledChanged();
    partial void OnProfileBackgroundColorChanging(string value);
    partial void OnProfileBackgroundColorChanged();
    partial void OnProfileBackgroundImageUrlChanging(string value);
    partial void OnProfileBackgroundImageUrlChanged();
    partial void OnProfileLinkColorChanging(string value);
    partial void OnProfileLinkColorChanged();
    partial void OnProfileSidebarBorderColorChanging(string value);
    partial void OnProfileSidebarBorderColorChanged();
    partial void OnProfileSidebarFillColorChanging(string value);
    partial void OnProfileSidebarFillColorChanged();
    partial void OnProfileTextColorChanging(string value);
    partial void OnProfileTextColorChanged();
    partial void OnStatusesCountChanging(System.Nullable<int> value);
    partial void OnStatusesCountChanged();
    partial void OnTimeZoneChanging(string value);
    partial void OnTimeZoneChanged();
    partial void OnUtcOffsetChanging(string value);
    partial void OnUtcOffsetChanged();
    partial void OnAccountIdChanging(System.Nullable<int> value);
    partial void OnAccountIdChanged();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnCreationDateChanging(System.Nullable<System.DateTime> value);
    partial void OnCreationDateChanged();
    partial void OnVersionChanging(System.Data.Linq.Binary value);
    partial void OnVersionChanged();
    partial void OnIsFollowerChanging(System.Nullable<bool> value);
    partial void OnIsFollowerChanged();
    partial void OnLastUpdatedChanging(System.Nullable<System.DateTime> value);
    partial void OnLastUpdatedChanged();
    #endregion
		
		public UserProfile()
		{
			this.Initialize();
		}
		
		[DataMember(Order=1)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[DataMember(Order=2)]
		public string ScreenName
		{
			get
			{
				return this._ScreenName;
			}
			set
			{
				if ((this._ScreenName != value))
				{
					this.OnScreenNameChanging(value);
					this.SendPropertyChanging();
					this._ScreenName = value;
					this.SendPropertyChanged("ScreenName");
					this.OnScreenNameChanged();
				}
			}
		}
		
		[DataMember(Order=3)]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[DataMember(Order=4)]
		public string ProfileImageUrl
		{
			get
			{
				return this._ProfileImageUrl;
			}
			set
			{
				if ((this._ProfileImageUrl != value))
				{
					this.OnProfileImageUrlChanging(value);
					this.SendPropertyChanging();
					this._ProfileImageUrl = value;
					this.SendPropertyChanged("ProfileImageUrl");
					this.OnProfileImageUrlChanged();
				}
			}
		}
		
		[DataMember(Order=5)]
		public string UserUrl
		{
			get
			{
				return this._UserUrl;
			}
			set
			{
				if ((this._UserUrl != value))
				{
					this.OnUserUrlChanging(value);
					this.SendPropertyChanging();
					this._UserUrl = value;
					this.SendPropertyChanged("UserUrl");
					this.OnUserUrlChanged();
				}
			}
		}
		
		[DataMember(Order=6)]
		public System.Nullable<bool> IsProtected
		{
			get
			{
				return this._IsProtected;
			}
			set
			{
				if ((this._IsProtected != value))
				{
					this.OnIsProtectedChanging(value);
					this.SendPropertyChanging();
					this._IsProtected = value;
					this.SendPropertyChanged("IsProtected");
					this.OnIsProtectedChanged();
				}
			}
		}
		
		[DataMember(Order=7)]
		public System.Nullable<int> FollowersCount
		{
			get
			{
				return this._FollowersCount;
			}
			set
			{
				if ((this._FollowersCount != value))
				{
					this.OnFollowersCountChanging(value);
					this.SendPropertyChanging();
					this._FollowersCount = value;
					this.SendPropertyChanged("FollowersCount");
					this.OnFollowersCountChanged();
				}
			}
		}
		
		[DataMember(Order=8)]
		public System.Nullable<int> UserId
		{
			get
			{
				return this._UserId;
			}
			set
			{
				if ((this._UserId != value))
				{
					this.OnUserIdChanging(value);
					this.SendPropertyChanging();
					this._UserId = value;
					this.SendPropertyChanged("UserId");
					this.OnUserIdChanged();
				}
			}
		}
		
		[DataMember(Order=9)]
		public string Location
		{
			get
			{
				return this._Location;
			}
			set
			{
				if ((this._Location != value))
				{
					this.OnLocationChanging(value);
					this.SendPropertyChanging();
					this._Location = value;
					this.SendPropertyChanged("Location");
					this.OnLocationChanged();
				}
			}
		}
		
		[DataMember(Order=10)]
		public System.Nullable<System.DateTime> TwitterCreatedDate
		{
			get
			{
				return this._TwitterCreatedDate;
			}
			set
			{
				if ((this._TwitterCreatedDate != value))
				{
					this.OnTwitterCreatedDateChanging(value);
					this.SendPropertyChanging();
					this._TwitterCreatedDate = value;
					this.SendPropertyChanged("TwitterCreatedDate");
					this.OnTwitterCreatedDateChanged();
				}
			}
		}
		
		[DataMember(Order=11)]
		public System.Nullable<int> FavouritesCount
		{
			get
			{
				return this._FavouritesCount;
			}
			set
			{
				if ((this._FavouritesCount != value))
				{
					this.OnFavouritesCountChanging(value);
					this.SendPropertyChanging();
					this._FavouritesCount = value;
					this.SendPropertyChanged("FavouritesCount");
					this.OnFavouritesCountChanged();
				}
			}
		}
		
		[DataMember(Order=12)]
		public System.Nullable<int> FriendsCount
		{
			get
			{
				return this._FriendsCount;
			}
			set
			{
				if ((this._FriendsCount != value))
				{
					this.OnFriendsCountChanging(value);
					this.SendPropertyChanging();
					this._FriendsCount = value;
					this.SendPropertyChanged("FriendsCount");
					this.OnFriendsCountChanged();
				}
			}
		}
		
		[DataMember(Order=13)]
		public System.Nullable<bool> HasNotifications
		{
			get
			{
				return this._HasNotifications;
			}
			set
			{
				if ((this._HasNotifications != value))
				{
					this.OnHasNotificationsChanging(value);
					this.SendPropertyChanging();
					this._HasNotifications = value;
					this.SendPropertyChanged("HasNotifications");
					this.OnHasNotificationsChanged();
				}
			}
		}
		
		[DataMember(Order=14)]
		public System.Nullable<bool> IsFollowing
		{
			get
			{
				return this._IsFollowing;
			}
			set
			{
				if ((this._IsFollowing != value))
				{
					this.OnIsFollowingChanging(value);
					this.SendPropertyChanging();
					this._IsFollowing = value;
					this.SendPropertyChanged("IsFollowing");
					this.OnIsFollowingChanged();
				}
			}
		}
		
		[DataMember(Order=15)]
		public System.Nullable<bool> IsVerified
		{
			get
			{
				return this._IsVerified;
			}
			set
			{
				if ((this._IsVerified != value))
				{
					this.OnIsVerifiedChanging(value);
					this.SendPropertyChanging();
					this._IsVerified = value;
					this.SendPropertyChanged("IsVerified");
					this.OnIsVerifiedChanged();
				}
			}
		}
		
		[DataMember(Order=16)]
		public System.Nullable<bool> IsProfileBackgroundTiled
		{
			get
			{
				return this._IsProfileBackgroundTiled;
			}
			set
			{
				if ((this._IsProfileBackgroundTiled != value))
				{
					this.OnIsProfileBackgroundTiledChanging(value);
					this.SendPropertyChanging();
					this._IsProfileBackgroundTiled = value;
					this.SendPropertyChanged("IsProfileBackgroundTiled");
					this.OnIsProfileBackgroundTiledChanged();
				}
			}
		}
		
		[DataMember(Order=17)]
		public string ProfileBackgroundColor
		{
			get
			{
				return this._ProfileBackgroundColor;
			}
			set
			{
				if ((this._ProfileBackgroundColor != value))
				{
					this.OnProfileBackgroundColorChanging(value);
					this.SendPropertyChanging();
					this._ProfileBackgroundColor = value;
					this.SendPropertyChanged("ProfileBackgroundColor");
					this.OnProfileBackgroundColorChanged();
				}
			}
		}
		
		[DataMember(Order=18)]
		public string ProfileBackgroundImageUrl
		{
			get
			{
				return this._ProfileBackgroundImageUrl;
			}
			set
			{
				if ((this._ProfileBackgroundImageUrl != value))
				{
					this.OnProfileBackgroundImageUrlChanging(value);
					this.SendPropertyChanging();
					this._ProfileBackgroundImageUrl = value;
					this.SendPropertyChanged("ProfileBackgroundImageUrl");
					this.OnProfileBackgroundImageUrlChanged();
				}
			}
		}
		
		[DataMember(Order=19)]
		public string ProfileLinkColor
		{
			get
			{
				return this._ProfileLinkColor;
			}
			set
			{
				if ((this._ProfileLinkColor != value))
				{
					this.OnProfileLinkColorChanging(value);
					this.SendPropertyChanging();
					this._ProfileLinkColor = value;
					this.SendPropertyChanged("ProfileLinkColor");
					this.OnProfileLinkColorChanged();
				}
			}
		}
		
		[DataMember(Order=20)]
		public string ProfileSidebarBorderColor
		{
			get
			{
				return this._ProfileSidebarBorderColor;
			}
			set
			{
				if ((this._ProfileSidebarBorderColor != value))
				{
					this.OnProfileSidebarBorderColorChanging(value);
					this.SendPropertyChanging();
					this._ProfileSidebarBorderColor = value;
					this.SendPropertyChanged("ProfileSidebarBorderColor");
					this.OnProfileSidebarBorderColorChanged();
				}
			}
		}
		
		[DataMember(Order=21)]
		public string ProfileSidebarFillColor
		{
			get
			{
				return this._ProfileSidebarFillColor;
			}
			set
			{
				if ((this._ProfileSidebarFillColor != value))
				{
					this.OnProfileSidebarFillColorChanging(value);
					this.SendPropertyChanging();
					this._ProfileSidebarFillColor = value;
					this.SendPropertyChanged("ProfileSidebarFillColor");
					this.OnProfileSidebarFillColorChanged();
				}
			}
		}
		
		[DataMember(Order=22)]
		public string ProfileTextColor
		{
			get
			{
				return this._ProfileTextColor;
			}
			set
			{
				if ((this._ProfileTextColor != value))
				{
					this.OnProfileTextColorChanging(value);
					this.SendPropertyChanging();
					this._ProfileTextColor = value;
					this.SendPropertyChanged("ProfileTextColor");
					this.OnProfileTextColorChanged();
				}
			}
		}
		
		[DataMember(Order=23)]
		public System.Nullable<int> StatusesCount
		{
			get
			{
				return this._StatusesCount;
			}
			set
			{
				if ((this._StatusesCount != value))
				{
					this.OnStatusesCountChanging(value);
					this.SendPropertyChanging();
					this._StatusesCount = value;
					this.SendPropertyChanged("StatusesCount");
					this.OnStatusesCountChanged();
				}
			}
		}
		
		[DataMember(Order=24)]
		public string TimeZone
		{
			get
			{
				return this._TimeZone;
			}
			set
			{
				if ((this._TimeZone != value))
				{
					this.OnTimeZoneChanging(value);
					this.SendPropertyChanging();
					this._TimeZone = value;
					this.SendPropertyChanged("TimeZone");
					this.OnTimeZoneChanged();
				}
			}
		}
		
		[DataMember(Order=25)]
		public string UtcOffset
		{
			get
			{
				return this._UtcOffset;
			}
			set
			{
				if ((this._UtcOffset != value))
				{
					this.OnUtcOffsetChanging(value);
					this.SendPropertyChanging();
					this._UtcOffset = value;
					this.SendPropertyChanged("UtcOffset");
					this.OnUtcOffsetChanged();
				}
			}
		}
		
		[DataMember(Order=26)]
		public System.Nullable<int> AccountId
		{
			get
			{
				return this._AccountId;
			}
			set
			{
				if ((this._AccountId != value))
				{
					if (this._Account.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAccountIdChanging(value);
					this.SendPropertyChanging();
					this._AccountId = value;
					this.SendPropertyChanged("AccountId");
					this.OnAccountIdChanged();
				}
			}
		}
		
		[DataMember(Order=27)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[DataMember(Order=28)]
		public System.Nullable<System.DateTime> CreationDate
		{
			get
			{
				return this._CreationDate;
			}
			set
			{
				if ((this._CreationDate != value))
				{
					this.OnCreationDateChanging(value);
					this.SendPropertyChanging();
					this._CreationDate = value;
					this.SendPropertyChanged("CreationDate");
					this.OnCreationDateChanged();
				}
			}
		}
		
		[DataMember(Order=29)]
		public System.Data.Linq.Binary Version
		{
			get
			{
				return this._Version;
			}
			set
			{
				if ((this._Version != value))
				{
					this.OnVersionChanging(value);
					this.SendPropertyChanging();
					this._Version = value;
					this.SendPropertyChanged("Version");
					this.OnVersionChanged();
				}
			}
		}
		
		[DataMember(Order=30)]
		public System.Nullable<bool> IsFollower
		{
			get
			{
				return this._IsFollower;
			}
			set
			{
				if ((this._IsFollower != value))
				{
					this.OnIsFollowerChanging(value);
					this.SendPropertyChanging();
					this._IsFollower = value;
					this.SendPropertyChanged("IsFollower");
					this.OnIsFollowerChanged();
				}
			}
		}
		
		[DataMember(Order=31)]
		public System.Nullable<System.DateTime> LastUpdated
		{
			get
			{
				return this._LastUpdated;
			}
			set
			{
				if ((this._LastUpdated != value))
				{
					this.OnLastUpdatedChanging(value);
					this.SendPropertyChanging();
					this._LastUpdated = value;
					this.SendPropertyChanged("LastUpdated");
					this.OnLastUpdatedChanged();
				}
			}
		}
		
		[DataMember(Order=32, EmitDefaultValue=false)]
		public EntitySet<DirectMessage> DirectMessages
		{
			get
			{
				if ((this.serializing 
							&& (this._DirectMessages.HasLoadedOrAssignedValues == false)))
				{
					return null;
				}
				return this._DirectMessages;
			}
			set
			{
				this._DirectMessages.Assign(value);
			}
		}
		
		[DataMember(Order=33, EmitDefaultValue=false)]
		public EntitySet<Status> Status
		{
			get
			{
				if ((this.serializing 
							&& (this._Status.HasLoadedOrAssignedValues == false)))
				{
					return null;
				}
				return this._Status;
			}
			set
			{
				this._Status.Assign(value);
			}
		}
		
		public Account Account
		{
			get
			{
				return this._Account.Entity;
			}
			set
			{
				Account previousValue = this._Account.Entity;
				if (((previousValue != value) 
							|| (this._Account.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Account.Entity = null;
						previousValue.UserProfiles.Remove(this);
					}
					this._Account.Entity = value;
					if ((value != null))
					{
						value.UserProfiles.Add(this);
						this._AccountId = value.Id;
					}
					else
					{
						this._AccountId = default(Nullable<int>);
					}
					this.SendPropertyChanged("Account");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_DirectMessages(DirectMessage entity)
		{
			this.SendPropertyChanging();
			entity.UserProfile = this;
		}
		
		private void detach_DirectMessages(DirectMessage entity)
		{
			this.SendPropertyChanging();
			entity.UserProfile = null;
		}
		
		private void attach_Status(Status entity)
		{
			this.SendPropertyChanging();
			entity.UserProfile = this;
		}
		
		private void detach_Status(Status entity)
		{
			this.SendPropertyChanging();
			entity.UserProfile = null;
		}
		
		private void Initialize()
		{
			this._DirectMessages = new EntitySet<DirectMessage>(new Action<DirectMessage>(this.attach_DirectMessages), new Action<DirectMessage>(this.detach_DirectMessages));
			this._Status = new EntitySet<Status>(new Action<Status>(this.attach_Status), new Action<Status>(this.detach_Status));
			this._Account = default(EntityRef<Account>);
			OnCreated();
		}
		
		[OnDeserializing()]
		[System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnDeserializing(StreamingContext context)
		{
			this.Initialize();
		}
		
		[OnSerializing()]
		[System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnSerializing(StreamingContext context)
		{
			this.serializing = true;
		}
		
		[OnSerialized()]
		[System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnSerialized(StreamingContext context)
		{
			this.serializing = false;
		}
	}
}
#pragma warning restore 1591
